library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity divisor_binario is
	port(
	clk, rst, dividendo_s, divisor_s, init: in std_logic;
	divisor_in: in std_logic_vector(3 downto 0);
	dividendo_in: in std_logic_vector(7 downto 0);
	result: out std_logic_vector(7 downto 0);
	pronto: out std_logic);		
end divisor_binario;

architecture comportamento of divisor_binario is
	-- Declaração dos estados
	type tipo_estado is (espera, d1, d2, d3, fim);
	signal estado, prox_estado : tipo_estado;
	-- Declaração dos registradores
	signal A: std_logic_vector(3 downto 0);
	signal R1: std_logic_vector(4 downto 0);
	signal D: std_logic_vector(7 downto 0);
	--sinal para o contador
	signal conta: std_logic_vector(1 downto 0);
	-- sinais de flag
	signal R, zero: std_logic;
begin
	zero <= P(1) NOR P(0);
	-- Process de ckock/reset com alteração de estados
	registra_estado: process (clk, rst)
	begin
		if (rst = '1') then
			estado <= stop;
		elsif (clk'event and clk = '1') then
			estado <= prox_estado;
		end if;
	end process registra_estado;
	-- Logica de estados
	prox_estado_f: process (init, zero, estado)
	begin
		case estado is
			when espera =>
				if init = '1' then
					prox_estado <= d1;
				else
					prox_estado <= espera;
				end if;
			when d1 =>
				prox_estado <= d2;
			when d2 =>
				prox_estado <= d3;
			when d3 =>
				if zero = '1' then
					prox_estado <= fim;
				else
					prox_estado <= d1;
				end if;
			when fim =>
				if init = '1' then
					prox_estado <= fim;
				else
					prox_estado <= espera;
				end if;
		end case;
	end process prox_estado_f;

	-- Logica de fluxo de dados
	fluxo_dados_f: process (clk)
	variable reg_ca: std_logic_vector(7 downto 0);
	begin
		if (clk'event and clk = '1') then
			if in_dividendo = '1' then
				D <= dividendo_in;
			end if;
			if in_divisor = '1' then
				A <= divisor_in;
			end if;
			case estado is
				when espera =>
					pronto <= '0';
					if init = '1' then
						R1 <= "00000"
						Conta <= "11";
					end if;
				when d1 =>
					R1 <= (D(7 downto 0) - A(3 downto 0));		
				when d2 =>
					if (R1(4) > 0) then
						R <= '0';
					else
						R <= '1';
						D(7 downto 3) <= R1(4 downto 0);
					end if;
				when d3 =>
					D(7 downto 0) <= (D(6 downto 0) & R)
					conta <= conta - "01";
				when fim =>
					pronto <= '1';
			end case;
		end if;
	end process fluxo_dados_f;
	result <= D(7 downto 0);
end comportamento;